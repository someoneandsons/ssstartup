/*
**	Grid
*/

@include grid($row-name, $col-name, $span-name, $push-name, $cols, $breakpoints);

.#{$row-name} {
	@extend %a-all;
	margin: 0 auto;
	width: 100%;
	@include rem(max-width, $max-width);
	
	&.full-width {
		max-width: 100%;
	}
	
	.#{$row-name} {
		padding: 0;
	}
}

/*
**	Body text blocks
*/

.body {
	header:not(.body) + &, > * + * {
		margin-top: v(3px);
	}
}

/*
**	Boxes
*/

@include boxes('p', 'm', $boxes, $breakpoints);

/*
**	Buttons
*/

button, .button, %button {
	@extend %tt-uppercase, %strong;
	@include rem(font-size, 14px);
	
	&[class*='bg-'], &[class*='bc-'] {
		padding: 0 v(4px);
		border-radius: v(4px);
		line-height: v(8px);
	}
	
	&[class*='bc-'] {
		line-height: v(8px) - 4px;
		border-width: 2px;
		border-style: solid;
		box-sizing: border-box;
	}
	
	@each $label, $color in $colors {
		@if type-of($color) == color {
			$adjustColor: lighten($color, 5%);
			@if (lightness($color) > 10) {
				$adjustColor: darken($color, 5%);
			}			
			
			&.c-#{$label}, &.c-#{$label}-hover {
				&:hover {
					color: $adjustColor;
				}
			}
			
			&.bg-#{$label}, &.bg-#{$label}-hover {
				&:hover {
					background-color: $adjustColor;
				}
			}
		}
	}
}

/*
**	Icons
*/

.icon, %icon {
	@extend %d-inline-block, %va-middle, %ta-center;
	white-space: nowrap;
	
	&:before {
		@extend %d-inline-block, %va-middle, %ta-center;
		content: "";
		height: v(5px);
		line-height: v(5px);
		width: v(5px);
		background-repeat: no-repeat;
		background-position: center center;
		@include background-size(contain);
	}
	
	@each $icon, $icon-colors in map-get($icons, 'names') {
		&[data-icon="#{$icon}"], &[data-icon-hover="#{$icon}"]:hover, &[data-icon-active="#{$icon}"].active {
			@each $color in $icon-colors {
				&[data-icon-color="#{$color}"], &[data-icon-color-hover="#{$color}"]:hover {
					&:before {
						background-image: svg-fill-replace('icons/#{$icon}.svg', map-get($icons, 'mask'), map-get($colors, $color));
					}
				}
			}
		}
	}
}

/*
**	Borders
*/

.border-top {
	border-top-width: 1px;
	border-top-style: solid;
}

.border-right {
	border-right-width: 1px;
	border-right-style: solid;
}

.border-bottom {
	border-bottom-width: 1px;
	border-bottom-style: solid;
}

.border-left {
	border-left-width: 1px;
	border-left-style: solid;
}

@each $name, $breakpoint in $breakpoints {
	@include breakpoint($breakpoint) {
		.border-#{$name}-none {
			border: none;
		}
	}
}

/*
**	List modifiers
*/

%list-no-items, .list-no-items {
	padding-left: 0;
	list-style: none;
}

%list-inline, .list-inline {
	@extend %list-no-items;
	
	li, dt, dd {
		@extend %d-inline;
	}
}

%list-nav, .list-nav {
	@extend %list-no-items;
	margin-bottom: v(-1px);
	margin-left: v(-1px);
	
	li, dt, dd {
		@extend %d-inline-block;
		margin-bottom: v(1px);
		margin-left: v(1px);
	}
}

%list-spaced, .list-spaced {
	li {
		@extend %body-item;
	}
}

/*
**	Intro
*/

%intro, .intro {
	> * {
		@include font(20px, v(3.5px));
		@extend %normal;
	}
}

/*
**	Ratios
*/

.ratio {
	&-1-1 {
		height: 0;
		padding-bottom: 100%;
	}
	
	&-4-3 {
		height: 0;
		padding-bottom: 3/4*100%;
	}
	
	&-16-9 {
		height: 0;
		padding-bottom: 9/16*100%;
	}
}

/*
**	Anchors
*/

.anchor {
	&-top {
		@extend %p-absolute;
		left: 0;
		right: 0;
		top: 0;
	}
	
	&-bottom {
		@extend %p-absolute;
		left: 0;
		right: 0;
		bottom: 0;
	}
	
	&-left {
		@extend %p-absolute;
		left: 0;
		top: 0;
		bottom: 0;
	}
	
	&-right {
		@extend %p-absolute;
		top: 0;
		right: 0;
		left: auto;
		bottom: 0;
	}
	
	&-top-right {
		@extend %p-absolute;
		top: 0;
		right: 0;
		left: auto;
		bottom: auto;
	}
	
	&-top-left {
		@extend %p-absolute;
		top: 0;
		right: auto;
		left: 0;
		bottom: auto;
	}
	
	&-bottom-right {
		@extend %p-absolute;
		top: auto;
		right: 0;
		left: auto;
		bottom: 0;
	}
	
	&-bottom-left {
		@extend %p-absolute;
		top: auto;
		right: auto;
		left: 0;
		bottom: 0;
	}
	
	&-cover {
		@extend %p-absolute;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
	}
	
	&-height {
		@extend %p-absolute;
		height: 100%;
	}
	
	&-width {
		@extend %p-absolute;
		width: 100%;
	}
}