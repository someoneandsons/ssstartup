/*
**	Grid
*/

@include grid($row-name, $col-name, $span-name, $push-name, $cols, $breakpoints);

.#{$row-name} {
	@extend %a-all;
	margin: 0 auto;
	width: 100%;
	@include rem(max-width, $max-width);
	
	&.full-width {
		max-width: 100%;
	}
	
	.#{$row-name} {
		padding: 0;
	}
}

/*
**	Boxes
*/

@include boxes('p', 'm', $boxes, $breakpoints);

/*
**	Icons
*/

.icon, %icon {
	@extend %d-inline-block, %va-middle, %ta-center;
	white-space: nowrap;
	
	&:before {
		@extend %d-inline-block, %va-middle, %ta-center;
		content: "";
		height: v(3px);
		line-height: v(3px);
		width: v(3px);
		margin-right: 0.5em;
		margin-top: -0.25em;
		background-repeat: no-repeat;
		background-position: center center;
		@include background-size(contain);
	}
	
	@each $icon, $icon-colors in map-get($icons, 'names') {
		&[data-icon="#{$icon}"], &[data-icon-hover="#{$icon}"]:hover, &[data-icon-active="#{$icon}"].active {
			@each $color in $icon-colors {
				&[data-icon-color="#{$color}"], &[data-icon-color-hover="#{$color}"]:hover {
					&:before {
						background-image: svg-fill-replace('icons/#{$icon}.svg', map-get($icons, 'mask'), map-get($colors, $color));
					}
				}
			}
		}
	}
}

/*
**	Buttons
*/

button, .button, %button {
	padding: 0 v(3px);
	height: v(6px);
	text-decoration: none;
	cursor: pointer;
	border: none;
	@include font(18px, v(6px));
	@include border-radius(v(0.5px));
	@include box-shadow(map-get($colors, 'dark') 0 0 0 1px inset);
	@extend %light, %d-inline-block, %bg-light, %c-dark, %ta-center, %a-primary, %va-middle;
	
	&:hover {
		position: relative;
		overflow: hidden;
		@extend %bg-gray;
		
		&:after {
			content: "";
			position: absolute;
			width: 100%;
			height: v(1px);
			bottom: 0;
			left: 0;
			@extend %bg-gray, %d-none;
		}
	}
}

/*
**	Borders
*/

.border-top {
	border-top-width: 1px;
	border-top-style: solid;
}

.border-right {
	border-right-width: 1px;
	border-right-style: solid;
}

.border-bottom {
	border-bottom-width: 1px;
	border-bottom-style: solid;
}

.border-left {
	border-left-width: 1px;
	border-left-style: solid;
}

@each $name, $breakpoint in $breakpoints {
	@include breakpoint($breakpoint) {
		.border-#{$name}-none {
			border: none;
		}
	}
}

/*
**	List modifiers
*/

%list-no-items, .list-no-items {
	padding-left: 0;
	list-style: none;
}

%list-inline, .list-inline {
	@extend %list-no-items;
	
	li, dt, dd {
		@extend %d-inline;
	}
}

%list-nav, .list-nav {
	@extend %list-no-items;
	margin-bottom: v(-1px);
	margin-left: v(-1px);
	
	li, dt, dd {
		@extend %d-inline-block;
		margin-bottom: v(1px);
		margin-left: v(1px);
	}
}

%list-spaced, .list-spaced {
	li {
		@extend %body-item;
	}
}

%list-dropdown, .list-dropdown {
	@extend %list-no-items, %p-relative;
	@include border-radius(v(0.5px));
	@include box-shadow(map-get($colors, 'dark') 0 0 0 1px);
	
	a.label {
		@extend %d-block, %ta-left;
		padding: 0 v(4.5px) 0 v(1.5px);
		@include background-size(v(2px) v(2px));
		
		.icon {
			@extend %ta-left;
		}
	}
	
	&:hover {
		@include border-bottom-radius(0);
		
		.label {
			@include border-bottom-radius(0);
			border-bottom-color: transparent;
			
			&:hover {
				background-image: svg-fill-replace('icons/arrow-up.svg', map-get($icons, 'mask'), map-get($colors, 'dark'));
			}
			
			.icon[data-hover] {
				color: transparent;
				
				&:after {
					@extend %d-inline-block, %va-top, %c-dark, %p-absolute;
					@include font(18px, v(6px));
					left: v(4.64px);
					content: attr(data-hover);
				}
			}
		}
	}
	
	.button {
		@extend %d-block, %ta-left;
		padding: 0 v(1.5px);
		@include box-shadow(none);
		
		&.label:hover {
			& + ul {
				@extend %d-block;
			}
		}
	}
	
	ul {
		@extend %d-none, %p-absolute, %list-no-items, %z-above;
		@include border-radius(0 0 v(0.5px) v(0.5px));
		@include box-shadow(map-get($colors, 'dark') 0 0 0 1px);
		width: 100%;
		
		&:before {
			content: "";
			@extend %p-absolute, %d-block, %bg-gray;
			height: 1px;
			width: 100%;
			top: -1px;
		}
		
		li {
			.button {
				@include border-radius(0);
				border-top-color: transparent;
				border-bottom-color: transparent;
			}
			
			&:last-child {
				.button {
					@include border-bottom-radius(v(0.5px));
					border-bottom-color: inherit;
				}
			}
		}
		
		&:hover {
			@extend %d-block;
		}
	}
}

/*
**	Autocomplete
*/

%autocomplete, .autocomplete {
	@extend %p-relative;
	
	input {
		width: 100%;
		
		&:not([value=""]) {
			& + ul {
				@extend %d-block;
			}
		}
	}
	
	ul {
		@extend %p-absolute, %list-no-items, %z-above;
		@include border-radius(0 0 v(0.5px) v(0.5px));
		@include box-shadow(map-get($colors, 'dark') 0 0 0 1px);
		margin-left: 0 !important;
		width: 100%;
		
		li {
			.button {
				@extend %d-block, %ta-center;
				@include box-shadow(none);
				@include border-radius(0);
				border-top-color: transparent;
				border-bottom-color: transparent;
			}
			
			&:last-child {
				.button {
					@include border-bottom-radius(v(0.5px));
					border-bottom-color: inherit;
				}
			}
		}
		
		&:hover {
			@extend %d-block;
		}
	}
}

/*
**	Intro
*/

%intro, .intro {
	> * {
		@include font(20px, v(3.5px));
		@extend %normal;
	}
}

/*
**	Intro
*/

%author, .author {
	border-bottom-width: 1px;
	border-bottom-style: solid;
	@extend %bc-dark;
}

/*
**	Ratios
*/

.ratio {
	height: 0;
	
	&.size-1-1 {
		padding-bottom: 100%;
	}
	
	&.size-4-3 {
		padding-bottom: 3/4*100%;
	}
	
	&.size-16-9 {
		padding-bottom: 9/16*100%;
	}
}

/*
**	Anchors
*/

.anchor {
	@extend %p-absolute;
	left: 0;
	
	&.top {
		left: 0;
		right: 0;
		top: 0;
	}
	
	&.bottom {
		left: 0;
		right: 0;
		bottom: 0;
	}
	
	&.left {
		left: 0;
		top: 0;
		bottom: 0;
	}
	
	&.right {
		left: auto;
		top: 0;
		right: 0;
		bottom: 0;
	}
	
	&.top-right {
		top: 0;
		right: 0;
		left: auto;
		bottom: auto;
	}
	
	&.top-left {
		top: 0;
		right: auto;
		left: 0;
		bottom: auto;
	}
	
	&.bottom-right {
		top: auto;
		right: 0;
		left: auto;
		bottom: 0;
	}
	
	&.bottom-left {
		top: auto;
		right: auto;
		left: 0;
		bottom: 0;
	}
	
	&.cover {
		right: 0;
		top: 0;
		bottom: 0;
	}
	
	&.height {
		height: 100%;
	}
	
	&.width {
		width: 100%;
	}
}